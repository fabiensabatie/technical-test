interface CollabSpaceState {
    [key: string]: any;
}
type UpdateFunction<T extends CollabSpaceState> = Partial<T> | ((prevState: T) => Partial<T>);
interface CollabSpaceHookReturn<T extends CollabSpaceState> {
    state: T;
    update: (updateFn: UpdateFunction<T>) => void;
    isConnected: boolean;
    connectionStatus: "connecting" | "connected" | "disconnected" | "error";
    userId: string;
}
interface CollabSpaceOptions {
    websocketUrl?: string;
    onConnect?: () => void;
    onDisconnect?: () => void;
    onError?: (error: Error) => void;
}

declare function useCollabSpace<T extends CollabSpaceState>(documentName: string, initialState: T, options?: CollabSpaceOptions): CollabSpaceHookReturn<T>;

declare function getUserId(): string;
declare function generateNewUserId(): string;

export { generateNewUserId, getUserId, useCollabSpace };
export type { CollabSpaceHookReturn, CollabSpaceOptions, CollabSpaceState, UpdateFunction };
